Find the count of numbers less than equal to N having exactly 9 divisors.
 
Example 1:

Input:
N = 100
Output: 2
Explanation:
The two numbers which have 
exactly 9 divisors are 36 and 100.
Example 2:

Input:
N = 1000
Output: 8 
Explanation:
The numbers are:
36 100 196 225 256 441 484 676

Your Task:  
You don't need to read input or print anything. Your task is to complete the function nineDivisors() which takes an integer N as an input parameter and returns the total number of elements from 1 to N inclusive, that have exactly 9 divisors.

Expected Time Complexity: O(sqrt(N))
Expected Auxiliary Space:  O(sqrt(N))
 
Constraints:
1<=N<=1010

SOLUTION:---------------------------------------------------------------------------------------------------------------SOLUTION:-------------------------
1)[C++]
    
#include<bits/stdc++.h> 
#include<math.h>
using namespace std; 

class Solution{   
public:
    long long int nineDivisors(long long int N){
    
        //Code Here
        long ans=0;
        int size=(int)sqrt(N);
        int prime[size+1];
        for(int i=1;i<=size;i++){
            prime[i]=i;
        }
        
            for(int i=2;i*i<=size;i++){
                 if(prime[i]==i){
                    for(int j=i+i;j<=size;j+=i){
                        if(prime[j]==j){
                            prime[j]=i;
                        }
                    }
                }
            }
            for(int i=2;i<=size;i++){
                int p=prime[i];
                int q=prime[i/p];
                if((p!=q && p*q==i && q!=1) ||(prime[i]==i && pow(i,8)<=N)){
                    ans+=1;
                }
            }
            return ans;
    }
    
};

int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        long long int N;
        cin>>N;
        Solution ob;
        cout << ob.nineDivisors(N) << endl;
    }
    return 0; 
}


2)JAVA:

import java.io.*;
import java.util.*;

class Solution{
    static long nineDivisors(long N){
       
        long ans=0;
        int size=(int)Math.sqrt(N);
        int prime[]=new int[size+1];
        for(int i=1;i<=size;i++){
            prime[i]=i;
        }
        
            for(int i=2;i*i<=size;i++){
                 if(prime[i]==i){
                    for(int j=i+i;j<=size;j+=i){
                        if(prime[j]==j){
                            prime[j]=i;
                        }
                    }
                }
            }
            for(int i=2;i<=size;i++){
                int p=prime[i];
                int q=prime[i/p];
                if((p!=q && p*q==i && q!=1) ||(prime[i]==i && Math.pow(i,8)<=N)){
                    ans+=1;
                }
            }
            return ans;
    }
}

class GFG
{
    public static void main(String args[])throws IOException
    {
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while(t-- > 0)
        {
            long N = Long.parseLong(read.readLine());

            Solution ob = new Solution();
            System.out.println(ob.nineDivisors(N));
        }
    }
}
