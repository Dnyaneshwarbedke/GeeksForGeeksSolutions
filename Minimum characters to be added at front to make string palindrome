class Solution {
    public static int solve(String s, String r) {
        int i,j,n=s.length();
        if(n==0)return 0;
        int []lps=new int[n+1];
        for(i=0,j=0;i<n;){
            if(s.charAt(i)==r.charAt(j)){
                lps[++i]=++j;
            }
            else if(j>0){
                j=lps[j-1];
            }
            else {
                lps[++i]=0;
            }
        }
        return n-lps[n];
    }
    public static int minChar(String str) {
       //Write your code here
       return solve(new StringBuilder(str).reverse().toString(),str);
    }
}
Given string str of length N. The task is to find the minimum characters to be added at the front to make string palindrome.
Note: A palindrome is a word which reads the same backward as forward. Example: "madam".

Example 1:

Input:
S = "abc"
Output: 2
Explanation: 
Add 'b' and 'c' at front of above string to make it
palindrome : "cbabc"
Example 2:

Input:
S = "aacecaaa"
Output: 1
Explanation: Add 'a' at front of above string
to make it palindrome : "aaacecaaa"
Your Task: 
You don't need to read input or print anything. Your task is to complete the function minChar() which takes a string S and returns an integer as output.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)

Constraints:
1 <= S.length <= 106

JAVA SOLUTION  :
class Solution {
    public static int solve(String s, String r) {
        int i,j,n=s.length();
        if(n==0)return 0;
        int []lps=new int[n+1];
        for(i=0,j=0;i<n;){
            if(s.charAt(i)==r.charAt(j)){
                lps[++i]=++j;
            }
            else if(j>0){
                j=lps[j-1];
            }
            else {
                lps[++i]=0;
            }
        }
        return n-lps[n];
    }
    public static int minChar(String str) {
       //Write your code here
       return solve(new StringBuilder(str).reverse().toString(),str);
    }
}

